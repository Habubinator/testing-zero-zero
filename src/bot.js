const TelegramBot = require("node-telegram-bot-api");
const bot = new TelegramBot(process.env.BOT_TOKEN, {
    polling: {
        interval: process.env.BOT_POLLING_INTERVAL || 300,
    },
});
const logger = require("./logger");
const db = require("./database/dbController");
const { getLink } = require("./requests");
const findFlag = require("country-emoji").flag;

// –ö–æ—Å—Ç—ã–ª—å, –ø—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ —Å–Ω–æ–≤–∞ –ø—Ä–æ–±–ª–µ–º —Å–æ —Å–º–∞–π–ª–∏–∫–∞–º–∏ –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å –ø–æ–¥ object-property search
function flag(countryName) {
    const emoji = findFlag(countryName);
    if (emoji) {
        return emoji;
    } else if (countryName == "England") {
        return "üè¥Û†ÅßÛ†Å¢Û†Å•Û†ÅÆÛ†ÅßÛ†Åø";
    }
    return "üè≥Ô∏è";
}

function getGMT0Time() {
    const now = new Date();
    const utcTime = now.getTime() + now.getTimezoneOffset() * 60000; // Convert to UTC time
    const gmt0Time = new Date(utcTime + 0 * 3600000); // Add 0 hours for GMT-0
    return gmt0Time;
}

bot.setMyCommands([
    { command: "/check_on", description: "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–µ–∫–µ—Ä —Å–æ–±—ã—Ç–∏–π" },
    { command: "/check_off", description: "–í—ã–∫–ª—é—á–∏—Ç—å —Ç—Ä–µ–∫–µ—Ä —Å–æ–±—ã—Ç–∏–π" },
    { command: "/upcoming", description: "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –±—É–¥—É—â–∏—Ö —Å–æ–±—ã—Ç–∏–π" },
    { command: "/live", description: "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö —Å–æ–±—ã—Ç–∏–π" },
    { command: "/support", description: "–ü–æ–º–æ—â—å" },
]);

bot.onText(/\/start/, async (msg) => {
    try {
        const chatId = msg.chat.id;
        if (msg.from.username == null) {
            bot.sendMessage(
                chatId,
                `–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –≤–∞–º –Ω—É–∂–µ–Ω @username`
            );
        } else {
            let user = await db.getUserById(msg.from.id);
            if (user.length && user[0]?.active) {
                // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∏ –Ω–∞–ø–∏—Å–∞–ª –±–æ—Ç—É
                return bot.sendMessage(
                    chatId,
                    `–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø. –ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.\n/check_on - –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–µ–∫–µ—Ä —Å–æ–±—ã—Ç–∏–π`
                );
            } else if (
                (await db.getPendingUserByUsername(msg.from.username)).length
            ) {
                // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∏ –Ω–µ –ø–∏—Å–∞–ª –±–æ—Ç—É
                await db.deletePendingUserByUsername(msg.from.username);
                await db.createUser(msg.from.id, msg.from.username);
                return bot.sendMessage(
                    chatId,
                    `–í—ã –ø–æ–ª—É—á–∏–ª–∏ –¥–æ—Å—Ç—É–ø. –ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.\n/check_on - –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–µ–∫–µ—Ä —Å–æ–±—ã—Ç–∏–π`
                );
            } else {
                // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω
                return bot.sendMessage(
                    chatId,
                    `–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞ –ø–∏—à–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è @xomaxs –∏–ª–∏ @ey4ar`
                );
            }
        }
    } catch (error) {
        logger.logError(error, msg);
    }
});

bot.onText(/\/check_on/, async (msg) => {
    try {
        const chatId = msg.chat.id;
        if (msg.from.username == null) {
            bot.sendMessage(
                chatId,
                `–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –≤–∞–º –Ω—É–∂–µ–Ω @username`
            );
        } else {
            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∏ –Ω–∞–ø–∏—Å–∞–ª –±–æ—Ç—É
            let user = await db.getUserById(msg.from.id);
            if (user.length && user[0]?.active) {
                let thisChat = await db.getChatById(chatId);
                if (thisChat == null) {
                    await db.createChat(
                        chatId,
                        msg.chat.title || "Private messages",
                        msg.from.id
                    );
                }
                if (thisChat && !thisChat.active) {
                    let chatCount = await db.countActiveChatsByUserId(
                        msg.from.id
                    );
                    if (chatCount < process.env.CHATS_NOTIFICATION_LIMIT) {
                        await db.changeChatActivity(chatId, true);
                        return bot.sendMessage(
                            chatId,
                            `–¢—Ä–µ–∫–µ—Ä —Å–æ–±—ã—Ç–∏–π –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω (${chatCount + 1}/${
                                process.env.CHATS_NOTIFICATION_LIMIT
                            })\n/check_off - –≤—ã–∫–ª—é—á–∏—Ç—å —Ç—Ä–µ–∫–µ—Ä —Å–æ–±—ã—Ç–∏–π`
                        );
                    } else {
                        return bot.sendMessage(
                            chatId,
                            `–ù–∞ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤ \n/check_off - –≤—ã–∫–ª—é—á–∏—Ç—å —Ç—Ä–µ–∫–µ—Ä —Å–æ–±—ã—Ç–∏–π`
                        );
                    }
                } else {
                    return bot.sendMessage(
                        chatId,
                        `–í —ç—Ç–æ–º —á–∞—Ç–µ —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ç—Ä–µ–∫–µ—Ä —Å–æ–±—ã—Ç–∏–π \n/check_off - –≤—ã–∫–ª—é—á–∏—Ç—å —Ç—Ä–µ–∫–µ—Ä —Å–æ–±—ã—Ç–∏–π`
                    );
                }
            } else if (
                (await db.getPendingUserByUsername(msg.from.username)).length
            ) {
                // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∏ –Ω–µ –ø–∏—Å–∞–ª –±–æ—Ç—É
                await db.deletePendingUserByUsername(msg.from.username);
                await db.createUser(msg.from.id, msg.from.username);
                await db.createChat(
                    chatId,
                    msg.chat.title || "Private messages",
                    msg.from.id
                );
                return bot.sendMessage(
                    chatId,
                    `–í—ã –ø–æ–ª—É—á–∏–ª–∏ –¥–æ—Å—Ç—É–ø.\n–¢—Ä–µ–∫–µ—Ä —Å–æ–±—ã—Ç–∏–π –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.(${1}/${
                        process.env.CHATS_NOTIFICATION_LIMIT
                    })\n/check_off - –≤—ã–∫–ª—é—á–∏—Ç—å —Ç—Ä–µ–∫–µ—Ä —Å–æ–±—ã—Ç–∏–π`
                );
            } else {
                // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω
                return bot.sendMessage(
                    chatId,
                    `–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞ –ø–∏—à–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è @xomaxs –∏–ª–∏ @ey4ar`
                );
            }
        }
    } catch (error) {
        logger.logError(error, msg);
    }
});

bot.onText(/\/check_off/, async (msg) => {
    try {
        const chatId = msg.chat.id;
        if (msg.from.username == null) {
            bot.sendMessage(
                chatId,
                `–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –≤–∞–º –Ω—É–∂–µ–Ω @username`
            );
        } else {
            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∏ –Ω–∞–ø–∏—Å–∞–ª –±–æ—Ç—É
            let user = await db.getUserById(msg.from.id);
            if (user.length && user[0]?.active) {
                let thisChat = await db.getChatById(chatId);
                if (thisChat == null) {
                    await db.createChat(
                        chatId,
                        msg.chat.title || "Private messages",
                        msg.from.id
                    );
                    await db.changeChatActivity(chatId, false);
                }
                if (thisChat && thisChat.active) {
                    await db.changeChatActivity(chatId, false);
                    let chatCount = await db.countActiveChatsByUserId(
                        msg.from.id
                    );
                    return bot.sendMessage(
                        chatId,
                        `–¢—Ä–µ–∫–µ—Ä —Å–æ–±—ã—Ç–∏–π —É—Å–ø–µ—à–Ω–æ –≤—ã–∫–ª—é—á–µ–Ω (${chatCount}/${process.env.CHATS_NOTIFICATION_LIMIT})\n/check_on - –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–µ–∫–µ—Ä —Å–æ–±—ã—Ç–∏–π `
                    );
                } else {
                    return bot.sendMessage(
                        chatId,
                        `–¢—Ä–µ–∫–µ—Ä —Å–æ–±—ã—Ç–∏–π –±—ã–ª –≤—ã–∫–ª—é—á–µ–Ω \n/check_on - –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–µ–∫–µ—Ä —Å–æ–±—ã—Ç–∏–π`
                    );
                }
            } else if (
                (await db.getPendingUserByUsername(msg.from.username)).length
            ) {
                // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∏ –Ω–µ –ø–∏—Å–∞–ª –±–æ—Ç—É
                await db.deletePendingUserByUsername(msg.from.username);
                await db.createUser(msg.from.id, msg.from.username);
                await db.createChat(
                    chatId,
                    msg.chat.title || "Private messages",
                    msg.from.id
                );
                await db.changeChatActivity(chatId, false);
                return bot.sendMessage(
                    chatId,
                    `–¢—Ä–µ–∫–µ—Ä —Å–æ–±—ã—Ç–∏–π –±—ã–ª –≤—ã–∫–ª—é—á–µ–Ω \n/check_on - –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–µ–∫–µ—Ä —Å–æ–±—ã—Ç–∏–π`
                );
            } else {
                // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω
                return bot.sendMessage(
                    chatId,
                    `–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞ –ø–∏—à–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è @xomaxs –∏–ª–∏ @ey4ar`
                );
            }
        }
    } catch (error) {
        logger.logError(error, msg);
    }
});

bot.onText(/\/upcoming/, async (msg, match) => {
    try {
        const chatId = msg.chat.id;
        if (msg.from.username == null) {
            bot.sendMessage(
                chatId,
                `–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –≤–∞–º –Ω—É–∂–µ–Ω @username`
            );
        } else {
            let user = await db.getUserById(msg.from.id);
            if (user.length && user[0]?.active) {
                let thisChat = await db.getChatById(chatId);
                if (thisChat == null) {
                    await db.createChat(
                        chatId,
                        msg.chat.title || "Private messages",
                        msg.from.id
                    );
                    await db.changeChatActivity(chatId, false);
                }
                if (isNaN(user[0].last_api_trigger)) {
                    user[0].last_api_trigger = 0;
                }
                // TODO - –ù–∞–∑–≤–∞–Ω–∏–µ last_api_trigger –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–¥—Ö–æ–¥–∏—Ç –∏–±–æ –≤ –Ω–µ–º —Ö—Ä–∞–Ω–∏—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–π –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π unix –ø–∏–Ω–≥–∞ –∞–ø–∏,
                // —Å—Ç–æ–∏—Ç —Å–º–µ–Ω–∏—Ç—å –Ω–∞ next_request_avaiable (–∏–ª–∏ —á—Ç–æ-—Ç–æ –≤—Ä–æ–¥–µ)
                if (Date.now() / 1000 >= user[0].last_api_trigger) {
                    const linkData = await getLink(
                        `https://api.soccersapi.com/v2.2/livescores/?user=${process.env.API_USERNAME}&token=${process.env.API_TOKEN}&t=today&include=stats,events&utc=3`
                    );
                    const data = linkData?.data;
                    if (data && data.length) {
                        let timeout =
                            +process.env.USER_API_TRIGGER_TIMEOUT_IN_SECONDS;
                        db.updateUserLastApiTrigger(
                            msg.from.id,
                            Date.now() / 1000 + timeout
                        );
                        let matchList = ``;
                        data.sort((a, b) => {
                            // –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ "—á—á:–º–º:—Å—Å" –∏–∑ —Å–≤–æ–π—Å—Ç–≤–∞ time –æ–±—ä–µ–∫—Ç–∞ a –∏ b
                            const timeA = a.time.time;
                            const timeB = b.time.time;

                            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º—è –≤ –æ–±—ä–µ–∫—Ç—ã Date
                            const dateA = new Date(`1970-01-01T${timeA}Z`);
                            const dateB = new Date(`1970-01-01T${timeB}Z`);

                            // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                            return dateA - dateB;
                        });
                        for (const match of data) {
                            if (
                                match.status === 0 &&
                                match.time != null &&
                                match.league != null
                            ) {
                                let time = `${match.time.time.substring(0, 5)}`; // –±–µ–∑ —Å–µ–∫—É–Ω–¥
                                matchList += `\n${time}${flag(
                                    match.league.country_name
                                )}${match.league.country_name},${
                                    match.league.name
                                }`;
                            }
                        }
                        let time = new Date();
                        hours = time.getHours();
                        minutes = time.getMinutes();
                        if (minutes < 10) {
                            minutes = "0" + minutes;
                        }
                        bot.sendMessage(
                            chatId,
                            `–í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞ ${hours}:${minutes} (UTC+3)` +
                                `\n‚Äî‚Äî‚Äî` +
                                `\n–ë–ª–∏–∂–∞–π—à–∏–µ –º–∞—Ç—á–∏:` +
                                `\n` +
                                matchList
                        );
                    } else {
                        return bot.sendMessage(
                            chatId,
                            `–ù–∞–±–ª—é–¥–∞—é—Ç—Å—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥.`
                        );
                    }
                } else {
                    return bot.sendMessage(
                        chatId,
                        `–í—ã –Ω–µ–¥–∞–≤–Ω–æ —Å–¥–µ–ª–∞–ª–∏ –∑–∞–ø—Ä–æ—Å, –ø–æ–¥–æ–∂–¥–∏—Ç–µ ${(
                            user[0].last_api_trigger -
                            Date.now() / 1000
                        ).toFixed(2)} —Å–µ–∫—É–Ω–¥`
                    );
                }
            } else if (
                (await db.getPendingUserByUsername(msg.from.username)).length
            ) {
                // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∏ –Ω–µ –ø–∏—Å–∞–ª –±–æ—Ç—É
                await db.deletePendingUserByUsername(msg.from.username);
                await db.createUser(msg.from.id, msg.from.username);
                await db.createChat(
                    chatId,
                    msg.chat.title || "Private messages",
                    msg.from.id
                );
                await db.changeChatActivity(chatId, false);
                return bot.sendMessage(
                    chatId,
                    `–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω \n–ü—Ä–∏—à–ª–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /upcoming –µ—â—ë —Ä–∞–∑`
                );
            } else {
                // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω
                return bot.sendMessage(
                    chatId,
                    `–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞ –ø–∏—à–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è @xomaxs –∏–ª–∏ @ey4ar`
                );
            }
        }
    } catch (error) {
        logger.logError(error, msg);
    }
});

bot.onText(/\/live/, async (msg, match) => {
    // TODO - check if that is user in db and has time lower than expected,
    // send api request and format it a little, then update last time. and return messsage
    try {
        const chatId = msg.chat.id;
        if (msg.from.username == null) {
            bot.sendMessage(
                chatId,
                `–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –≤–∞–º –Ω—É–∂–µ–Ω @username`
            );
        } else {
            let user = await db.getUserById(msg.from.id);
            if (user.length && user[0]?.active) {
                let thisChat = await db.getChatById(chatId);
                if (thisChat == null) {
                    await db.createChat(
                        chatId,
                        msg.chat.title || "Private messages",
                        msg.from.id
                    );
                }
                if (isNaN(user[0].last_api_trigger)) {
                    user[0].last_api_trigger = 0;
                }
                if (Date.now() / 1000 >= user[0].last_api_trigger) {
                    // TODO - –ù–∞–∑–≤–∞–Ω–∏–µ last_api_trigger –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–¥—Ö–æ–¥–∏—Ç –∏–±–æ –≤ –Ω–µ–º —Ö—Ä–∞–Ω–∏—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–π –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π unix –ø–∏–Ω–≥–∞ –∞–ø–∏
                    const linkData = await getLink(
                        `https://api.soccersapi.com/v2.2/livescores/?user=${process.env.API_USERNAME}&token=${process.env.API_TOKEN}&t=live&include=stats,events&utc=3`
                    );
                    const data = linkData?.data;
                    if (data && data.length) {
                        let timeout =
                            +process.env.USER_API_TRIGGER_TIMEOUT_IN_SECONDS;
                        db.updateUserLastApiTrigger(
                            msg.from.id,
                            Date.now() / 1000 + timeout
                        );
                        let matchList = ``;
                        data.sort((a, b) => {
                            // –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ "—á—á:–º–º:—Å—Å" –∏–∑ —Å–≤–æ–π—Å—Ç–≤–∞ time –æ–±—ä–µ–∫—Ç–∞ a –∏ b
                            const timeA = a?.time?.time;
                            const timeB = b?.time?.time;
                            if (timeA == null) {
                                return -1;
                            } else if (timeB == null) {
                                return 1;
                            }
                            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º—è –≤ –æ–±—ä–µ–∫—Ç—ã Date
                            const dateA = new Date(`1970-01-01T${timeA}Z`);
                            const dateB = new Date(`1970-01-01T${timeB}Z`);

                            // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                            return dateA - dateB;
                        });
                        for (const match of data) {
                            if (match.status == 1 && match.league != null) {
                                matchList += `\n${flag(
                                    match.league.country_name
                                )}${match.league.country_name},${
                                    match.league.name
                                }`;
                            }
                        }
                        bot.sendMessage(
                            chatId,
                            `üìä–ò–¥—ë—Ç –∞–Ω–∞–ª–∏–∑ –ø–æ –º–∞—Ç—á–∞–º:` + `\n` + matchList
                        );
                    } else {
                        return bot.sendMessage(
                            chatId,
                            `üìä–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –º–∞—Ç—á–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.`
                        );
                    }
                } else {
                    return bot.sendMessage(
                        chatId,
                        `–í—ã –Ω–µ–¥–∞–≤–Ω–æ —Å–¥–µ–ª–∞–ª–∏ –∑–∞–ø—Ä–æ—Å, –ø–æ–¥–æ–∂–¥–∏—Ç–µ ${(
                            user[0].last_api_trigger -
                            Date.now() / 1000
                        ).toFixed(2)} —Å–µ–∫—É–Ω–¥`
                    );
                }
            } else if (
                (await db.getPendingUserByUsername(msg.from.username)).length
            ) {
                // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∏ –Ω–µ –ø–∏—Å–∞–ª –±–æ—Ç—É
                await db.deletePendingUserByUsername(msg.from.username);
                await db.createUser(msg.from.id, msg.from.username);
                await db.createChat(
                    chatId,
                    msg.chat.title || "Private messages",
                    msg.from.id
                );
                await db.changeChatActivity(chatId, false);
                return bot.sendMessage(
                    chatId,
                    `–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω \n–ü—Ä–∏—à–ª–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /live –µ—â—ë —Ä–∞–∑`
                );
            } else {
                // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω
                return bot.sendMessage(
                    chatId,
                    `–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞ –ø–∏—à–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è @xomaxs –∏–ª–∏ @ey4ar`
                );
            }
        }
    } catch (error) {
        logger.logError(error, msg);
    }
});

bot.onText(/\/support/, async (msg, match) => {
    try {
        const chatId = msg.chat.id;
        bot.sendMessage(
            chatId,
            `–ü–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –ø—Ä–æ–±–ª–µ–º–∞–º –∏ –∑–∞ –ø–æ–º–æ—â—å—é –ø–∏—à–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è @xomaxs –∏–ª–∏ @ey4ar`
        );
    } catch (error) {
        logger.logError(error, msg);
    }
});

bot.on("polling_error", (error) => {
    if (Math.floor(process.uptime()) <= 60) {
        process.exit(0);
    }
});

module.exports = bot;
